<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1482705579951">{:repl-history {:ide [], :local [&quot;(doc pprint)&quot; &quot;(pprint\n\t(find-index compacted-arr 16 0 (alength compacted-arr)))&quot; &quot;(pprint (range 10))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (/ (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0) \n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot;, right=\&quot; right)]\n\t\t(if (&lt; right left)\n\t\t\tnil\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot;, right=\&quot; right)]\n\t\t(if (&lt; right left)\n\t\t\tnil\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(pprint\n\t(find-index compacted-arr 16778240 0 (alength compacted-arr)))&quot; &quot;(pprint\n\t(find-index compacted-arr 1677 0 (alength compacted-arr)))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777216 0 (alength compacted-arr)))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777216 0 0))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777216 0 1))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot;, right=\&quot; right)]\n\t\t(if (= to-find mid-value) (aget data mid-index)\n\t\t\t(cond\n\t\t\t\t(= left right) nil\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(find-index compacted-arr 16777472 0 1)&quot; &quot;(pprint\n\t(find-index compacted-arr 16777472 0 2))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777472 0 3))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777472 0 1))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777 0 1))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (print \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(pprint (find-index compacted-arr 16781312 0 9))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot;left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(pprint (find-index compacted-arr 16781313 0 9))&quot; &quot;(aget compacted-arr 7 0)&quot; &quot;(aget compacted-arr 0 7)&quot; &quot;(pprint (find-index compacted-arr 16781313 0 (alength compacted-arr)))&quot; &quot;(pprint (find-index compacted-arr 1 0 (alength compacted-arr)))&quot; &quot;9999999999999&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t(if (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t(aget data (Math/max right 0)))))&quot; &quot;(aget compacted-arr 6)&quot; &quot;(aget compacted-arr 5)&quot; &quot;(alength compacted-arr)&quot; &quot;([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&lt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0)))))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&lt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0))))))&quot; &quot;(pprint (find-index compacted-arr 9999999999999 0 (alength compacted-arr)))&quot; &quot;(pprint (find-index compacted-arr 9999999999999 ))&quot; &quot;(pprint (find-index compacted-arr 9 1 ))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&lt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data right )))))&quot; &quot;(pprint (find-index compacted-arr 1))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data right )))))&quot; &quot;(pprint (find-index compacted-arr 16778240))&quot; &quot;([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0)))))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0))))))&quot; &quot;(pprint (find-index compacted-arr 16))&quot; &quot;(pprint (find-index compacted-arr 9999999999999))&quot; &quot;(use 'ip-geolocation.quova-file :reload)&quot; &quot;(print \n\tcompact-txt)&quot; &quot;(pprint \n\tcompact-txt)&quot; &quot;(pprint \n\tcompacted-txt)&quot; &quot;(spit \&quot;../test-compacted-data.dat\&quot; compacted-txt)&quot; &quot;(def compacted-data \n\t(load-compacted-arr \&quot;../test-compacted-data.dat\&quot;))&quot; &quot;(pprint compacted-data)&quot; &quot;(defn load-data-arr [rdr]\n\t(with-open [rdr rdr]\n\t\t(-&gt;&gt; rdr\n\t\t\t\t line-seq\n\t\t\t\t (map read-string)\n\t\t\t\t (map (partial into-array Long/TYPE))\n\t\t\t\t into-array)))&quot; &quot;(def compacted-arr (load-compacted-arr \&quot;../QUOVA-10-compacted.dat\&quot;))&quot; &quot;(load-compacted-arr (io/reader (io/input-stream (.getBytes quova-data-snippet-str))))&quot; &quot;(type (io/reader (io/input-stream (.getBytes quova-data-snippet-str))))&quot; &quot;(type (load-compacted-arr \n\t\t\t\t(io/reader (io/input-stream (.getBytes quova-data-snippet-str)))))&quot; &quot;(defn load-compacted-arr [rdr]\n\t(-&gt;&gt; rdr\n\t\t line-seq\n\t\t (map read-string)\n\t\t (map (partial into-array Long/TYPE))\n\t\t into-array))&quot; &quot;(defn load-compacted-arr [rdr]\n\t(with-open [rdr rdr]\n\t\t(-&gt;&gt; rdr\n\t\t\t line-seq\n\t\t\t (map read-string)\n\t\t\t (map (partial into-array Long/TYPE))\n\t\t\t into-array)))&quot; &quot;(def compacted-arr\n\t(load-compacted-arr (io/reader \&quot;../QUOVA-10-compacted.dat\&quot;)))&quot; &quot;(deftest load-compacted-arr-test\n\t(let [rdr (io/reader (io/input-stream (.getBytes quova-data-snippet-str)))]\n\t\t(is (= 6 (alength (load-compacted-arr rdr))))))&quot; &quot;(deftest load-compacted-arr-test\n\t(let [rdr (io/reader (io/input-stream (.getBytes quova-data-snippet-str)))]\n\t\t(is (= 6 6))))&quot; &quot;(use 'clojre.pprint)&quot; &quot;(use 'clojure.pprint)&quot; &quot;(let [rdr (io/reader (io/input-stream (.getBytes quova-data-snippet-str)))]\n\t(pprint (load-compacted-arr rdr)))&quot; &quot;(defn str-&gt;rdr [txt]\n\t(io/reader (io/input-stream (.getBytes txt))))&quot; &quot;(find-data compacted-arr 16777217)&quot; &quot;(pprint (find-data compacted-arr 16778240))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0))))))&quot; &quot;(&lt;= 1 2 3)&quot; &quot;(&lt;= 1 3 3)&quot; &quot;(&lt;= 1 1 3)&quot; &quot;(in-range? 123 (into-array [100 130 1 1]))&quot; &quot;(in-range? 123 (into-array [100 120 1 1]))&quot; &quot;(in-range? 123 (into-array [125 130 1 1]))&quot; &quot;(in-range? 125 (into-array [125 130 1 1]))&quot; &quot;(defn in-range? [value data]\n\t(&lt;= (aget data 0) value (aget data 1)))&quot; &quot;(defn in-range? [value row-data]\n\t(&lt;= (aget row-data 0) value (aget row-data 1)))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(cond \n\t\t\t\t\t(in-range? to-find (aget data mid-index)) (aget data mid-index)\n\t\t\t\t\t :else nil)))))&quot; &quot;(pprint (find-data compacted-arr 16777216))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(cond \n\t\t\t\t\t(in-range? to-find (aget data mid-index)) (aget data mid-index)\n\t\t\t\t\t(in-range? to-find (aget data lower-index)) (aget data lower-index)\n\t\t\t\t\t(in-range? to-find (aget data higher-index)) (aget data higher-index)))))))&quot; &quot;(pprint (find-data compacted-arr 16777217))&quot; &quot;(in-range? 131 (into-array [125 130 1 1]))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(condp in-range? mid-value\n\t\t\t\t\t(aget data mid-index) (aget data mid-index)\n\t\t\t\t\t(aget data lower-index) (aget data lower-index)\n\t\t\t\t\t(aget data higher-index) (aget data higher-index)))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(condp (fn[row-index value] (in-range? value (aget data row-index))) mid-value\n\t\t\t\t\tmid-index (aget data mid-index)\n\t\t\t\t\tlower-index (aget data lower-index)\n\t\t\t\t\thigher-index (aget data higher-index)))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(condp #(in-range? %2 (aget data %1)) mid-value\n\t\t\t\t\tmid-index (aget data mid-index)\n\t\t\t\t\tlower-index (aget data lower-index)\n\t\t\t\t\thigher-index (aget data higher-index)))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(condp in-range? value\n\t\t\t\t\t(aget data mid-index) (aget data mid-index)\n\t\t\t\t\t(aget data lower-index) (aget data lower-index)\n\t\t\t\t\t(aget data higher-index) (aget data higher-index)))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(cond\n\t\t\t\t\t(in-range? to-find (aget data mid-index)) (aget data mid-index)\n\t\t\t\t\t(in-range? to-find (aget data lower-index)) (aget data lower-index)\n\t\t\t\t\t(in-range? to-find (aget data higher-index)) (aget data higher-index)))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(in-range? to-find (aget data mid-index)) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(in-range? to-find (aget data mid-index)) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(cond\n\t\t\t\t\t(in-range? to-find (aget data lower-index)) (aget data lower-index)\n\t\t\t\t\t(in-range? to-find (aget data higher-index)) (aget data higher-index)))))))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left\&quot; left \&quot; right\&quot; right \&quot; mid-index\&quot; mid-index \&quot; mid-value\&quot; mid-value)]\n\t\t\t(if (&gt;= right left)\n\t\t\t\t(cond\n\t\t\t\t\t(in-range? to-find (aget data mid-index)) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(let [lower-index (Math/max (dec mid-index) 0)\n\t\t\t\t\t\t\thigher-index (Math/min (inc mid-index) (dec (alength data)))]\n\t\t\t\t(cond\n\t\t\t\t\t(in-range? to-find (aget data lower-index)) (aget data lower-index)\n\t\t\t\t\t(in-range? to-find (aget data higher-index)) (aget data higher-index)))))))&quot; &quot;(pprint compacted-arr)&quot; &quot;(pprint (find-data compacted-arr 16777472))&quot; &quot;(pprint (find-data compacted-arr 16777471))&quot; &quot;(pprint (find-data compacted-arr 16771))&quot; &quot;(pprint (find-data compacted-arr 16781311))&quot; &quot;(defn find-data\n\t([data to-find]\n\t  (find-data data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-idx (quot (+ right left) 2)\n\t\t\t\t\tmid-data (aget data mid-idx)\n\t\t\t\t\tmid-value (aget mid-data 0)]\n\t\t\t(if (&gt;= right left)\n\t\t\t\t(cond\n\t\t\t\t\t(in-range? to-find mid-data) mid-data\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-idx) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-idx)))\n\t\t\t\t(let [lo-idx (Math/max (dec mid-idx) 0)\n\t\t\t\t\t\t\thi-idx (Math/min (inc mid-idx) (dec (alength data)))]\n\t\t\t\t\t(cond\n\t\t\t\t\t\t(in-range? to-find (aget data lo-idx)) (aget data lo-idx)\n\t\t\t\t\t\t(in-range? to-find (aget data hi-idx)) (aget data hi-idx)))))))&quot; &quot;(pprint (find-data compacted-arr 16787200))&quot; &quot;(pprint (find-data compacted-arr 16787199))&quot; &quot;&quot;], :remote []}}</component>
</project>