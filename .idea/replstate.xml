<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1482690814679">{:repl-history {:ide [], :local [&quot;(defn load-compacted-arr [file-name]\n\t(into-array (map read-string (line-seq (io/reader file-name)))))&quot; &quot;(defn load-compacted-arr [file-name]\n\t(-&gt;&gt; (io/reader file-name)\n\t\t\t line-seq\n\t\t\t (map read-string)\n\t\t\t into-array))&quot; &quot;(defn load-compacted-arr [file-name]\n\t(-&gt;&gt; (io/reader file-name)\n\t\t\t line-seq\n\t\t\t (map (comp into-array Long/TYPE read-string))\n\t\t\t into-array))&quot; &quot;(defn load-compacted-arr [file-name]\n\t(-&gt;&gt; (io/reader file-name)\n\t\t\t line-seq\n\t\t\t (map (partial into-array Long/TYPE read-string))\n\t\t\t into-array))&quot; &quot;(defn load-compacted-arr [file-name]\n\t(-&gt;&gt; (io/reader file-name)\n\t\t\t line-seq\n\t\t\t (map #(into-array Long/TYPE (read-string %)))\n\t\t\t into-array))&quot; &quot;(def compacted-arr (load-compacted-arr \&quot;../QUOVA-10.dat\&quot;))&quot; &quot;(compact (io/reader \&quot;../QUOVA-10.dat\&quot;)\n\t\t\t\t (io/writer \&quot;../QUOVA-10-compacted.dat\&quot;))&quot; &quot;(defn load-compacted-arr [file-name]\n\t(-&gt;&gt; (io/reader file-name)\n\t\t\t line-seq\n\t\t\t (map read-string )\n\t\t\t into-array))&quot; &quot;(into-array [16777216 16777471 -27 153])&quot; &quot;(use 'clojrue.pprint )&quot; &quot;(use 'clojure.pprint )&quot; &quot;(pprint (into-array [16777216 16777471 -27 153]))&quot; &quot;(doc partial)&quot; &quot;(-&gt;&gt; \&quot;[1 2 3 4]\&quot;\n\t\t line-seq)&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;)\n\t\t line-seq)&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t line-seq)&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;]))&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t (map (partial into-array read-string)))&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t (map (partial map into-array read-string)))&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t (map read-string))&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t (map read-string)\n\t\t into-array)&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t (map read-string)\n\t\t (map into-array)\n\t\t into-array)&quot; &quot;(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t (map read-string)\n\t\t (map (partial into-array Long/TYPE))\n\t\t into-array)&quot; &quot;(defn load-compacted-arr [file-name]\n\t(-&gt;&gt; (io/reader file-name)\n\t\t\t line-seq\n\t\t\t (map read-string)\n\t\t\t (map into-array Long/TYPE)\n\t\t\t into-array))&quot; &quot;(defn load-compacted-arr [file-name]\n\t(-&gt;&gt; (io/reader file-name)\n\t\t\t line-seq\n\t\t\t (map read-string)\n\t\t\t (map (partial into-array Long/TYPE))\n\t\t\t into-array))&quot; &quot;(load-compacted-arr QUOVA_COMPACTED_FILE_NAME)&quot; &quot;(defn compact-original-file []\n\t(compact (clojure.java.io/reader QUOVA_FILE_NAME)\n\t\t\t\t\t\t(clojure.java.io/writer QUOVA_COMPACTED_FILE_NAME)))&quot; &quot;(compact-original-file)&quot; &quot;(def compacted-arr (load-compacted-arr QUOVA_COMPACTED_FILE_NAME))&quot; &quot;(aget compacted-arr)&quot; &quot;0&quot; &quot;(count compacted-arr)&quot; &quot;(count (aget compacted-arr 0))&quot; &quot;(pprint (aget compacted-arr 0 0))&quot; &quot;(type (aget compacted-arr 0 0))&quot; &quot;234&quot; &quot;(ns ip-geolocation.quova-file\n\t(:require [clojure.string :as str])\n\t(:require [clojure-csv.core :as csv]\n\t\t\t\t\t\t[clojure.java.io :as io]\n\t\t\t\t\t\t[ip-geolocation.quova-ip-format :refer :all]))&quot; &quot;(pprint )&quot; &quot;(pprint (aget compacted-arr 0))&quot; &quot;(type (aget compacted-arr 0))&quot; &quot;(def compacted-arr \n\t(-&gt;&gt; (lazy-seq [\&quot;[1 2 3 4]\&quot; \&quot;[2 3 4 5]\&quot;])\n\t\t (map read-string)\n\t\t (map (partial into-array Long/TYPE))\n\t\t into-array))&quot; &quot;(octetIp-&gt;longIp \&quot;123.123.123.123\&quot;)&quot; &quot;(def compacted-arr (load-compacted-arr \&quot;../QUOVA-10-compacted.dat\&quot;))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (/ (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)]\n\t\t(cond\n\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index))))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (/ (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)]\n\t\t(when (&gt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(pprint (find-index compacted-arr 16778240 0 (alength compacted-arr)))&quot; &quot;(find-index compacted-arr 1 0 (alength compacted-arr))&quot; &quot;(nil? (find-index compacted-arr 1 0 (alength compacted-arr)))&quot; &quot;(aget compacted-arr 0)&quot; &quot;(doc require)&quot; &quot;(longIp-&gt;octetIp 16778240)&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (/ (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)]\n\t\t(if (&lt; right left)\n\t\t\tnil\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(find-index compacted-arr 16778240 0 (alength compacted-arr))&quot; &quot;(use 'clojure.pprint)&quot; &quot;(doc pprint)&quot; &quot;(pprint\n\t(find-index compacted-arr 16 0 (alength compacted-arr)))&quot; &quot;(pprint (range 10))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (/ (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0) \n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot;, right=\&quot; right)]\n\t\t(if (&lt; right left)\n\t\t\tnil\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot;, right=\&quot; right)]\n\t\t(if (&lt; right left)\n\t\t\tnil\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(pprint\n\t(find-index compacted-arr 16778240 0 (alength compacted-arr)))&quot; &quot;(pprint\n\t(find-index compacted-arr 1677 0 (alength compacted-arr)))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777216 0 (alength compacted-arr)))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777216 0 0))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777216 0 1))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot;, right=\&quot; right)]\n\t\t(if (= to-find mid-value) (aget data mid-index)\n\t\t\t(cond\n\t\t\t\t(= left right) nil\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find mid-index right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left mid-index)))))&quot; &quot;(find-index compacted-arr 16777472 0 1)&quot; &quot;(pprint\n\t(find-index compacted-arr 16777472 0 2))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777472 0 3))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777472 0 1))&quot; &quot;(pprint\n\t(find-index compacted-arr 16777 0 1))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (print \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(pprint (find-index compacted-arr 16781312 0 9))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot;left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t(when-not (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index))))))&quot; &quot;(pprint (find-index compacted-arr 16781313 0 9))&quot; &quot;(aget compacted-arr 7 0)&quot; &quot;(aget compacted-arr 0 7)&quot; &quot;(pprint (find-index compacted-arr 16781313 0 (alength compacted-arr)))&quot; &quot;(pprint (find-index compacted-arr 1 0 (alength compacted-arr)))&quot; &quot;9999999999999&quot; &quot;(defn find-index [data to-find left right]\n\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t(if (&lt; right left)\n\t\t\t(cond\n\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t(aget data (Math/max right 0)))))&quot; &quot;(aget compacted-arr 6)&quot; &quot;(aget compacted-arr 5)&quot; &quot;(alength compacted-arr)&quot; &quot;([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&lt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0)))))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&lt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0))))))&quot; &quot;(pprint (find-index compacted-arr 9999999999999 0 (alength compacted-arr)))&quot; &quot;(pprint (find-index compacted-arr 9999999999999 ))&quot; &quot;(pprint (find-index compacted-arr 9 1 ))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&lt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data right )))))&quot; &quot;(pprint (find-index compacted-arr 1))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data right )))))&quot; &quot;(pprint (find-index compacted-arr 16778240))&quot; &quot;([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0)))))&quot; &quot;(defn find-index\n\t([data to-find]\n\t  (find-index data to-find 0 (dec (alength data))))\n\t([data to-find left right]\n\t\t(let [mid-index (quot (+ right left) 2)\n\t\t\t\t\tmid-value (aget data mid-index 0)\n\t\t\t\t\t_ (println \&quot;left=\&quot; left \&quot; ,right=\&quot; right \&quot; ,mid-index=\&quot; mid-index \&quot; , mid-value=\&quot; mid-value)]\n\t\t\t(if (&gt; right left)\n\t\t\t\t(cond\n\t\t\t\t\t(= to-find mid-value) (aget data mid-index)\n\t\t\t\t\t(&gt; to-find mid-value) (recur data to-find (inc mid-index) right)\n\t\t\t\t\t(&lt; to-find mid-value)\t(recur data to-find left (dec mid-index)))\n\t\t\t\t(aget data (Math/max right 0))))))&quot; &quot;(pprint compacted-arr)&quot; &quot;(pprint (find-index compacted-arr 16))&quot; &quot;(pprint (find-index compacted-arr 9999999999999))&quot; &quot;(use 'ip-geolocation.quova-file :reload)&quot;], :remote []}}</component>
</project>